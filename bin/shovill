#!/usr/bin/env perl
use strict;
use Data::Dumper;
use File::Slurp;
use File::Path qw(make_path remove_tree);
use File::Spec;
use File::Copy;
use File::Temp;
use List::Util qw(min max);
use Cwd;
use File::Basename;
use FindBin;

# Globals
my $EXE = basename($0);
my $VERSION = "0.9.0-dev";
my $URL = "https://github.com/tseemann/shovill";
my $AUTHOR = 'Torsten Seemann <torsten.seemann@gmail.com>';
my $OPSYS = $^O;
my $BAM = "$EXE.bam";
my %VALID_ASM = ('before_rr'=>1, 'contigs'=>1, 'scaffolds'=>1);

my $ADAPTERS = "$FindBin::RealBin/../db/trimmomatic.fa"; # hard-code this for Conda etc.

my $MIN_K = 31;               # sensible minimum, although prefer higher
my $MAX_K = 127;              # spades max
my $KMER_READ_FRAC = 0.75;    # ensure max kmer below this prop of read length
my $MINBQ = 3;                # for trimming and stats
my $MIN_FLASH_OVERLAP = 20;   # for stitching
my $MIN_RAM_GB = 1;           # for all tools

my @LOG= ();                  # global log file, saved at end
my @CMDLINE = ($0, @ARGV);    # save this for printing to log later
my $t0 = time;                # basetime to measure running duration

# Options
my(@Options, $debug, $version,
             $outdir, $force, $cpus, $tmpdir, $keepfiles, $namefmt,
             $kmers, $gsize, $R1, $R2, $opts, $ram, $depth,
             $nocorr, $trim, $trimopt, $asm, $minlen, $mincov);
setOptions();

# Say hello
msg("Hello", $ENV{USER} || 'stranger');
msg("You ran: @CMDLINE");
msg("This is $EXE $VERSION");
msg("Written by $AUTHOR");
msg("Homepage is $URL");
msg("Operating system is $OPSYS");

# Check options
-r $R1 or err("Can't read --R1 $R1");
-r $R2 or err("Can't read --R2 $R2");
-r $ADAPTERS or err("Can't see adapter file: $ADAPTERS");
sub is_integer { return $_[0] =~ m/^(\d+)$/ if defined $_[0]; }
$gsize = $gsize ? guess_bp($gsize) : 0;
$cpus > 0 or err("Invalid --cpus $cpus");
$minlen >= 0 or err("Invalid --minlen $minlen");
(defined $mincov && $mincov >= 0) or err("Please provide a non-negative value for --mincov");
$ram >= $MIN_RAM_GB or err("Invalid --ram $ram - need at least $MIN_RAM_GB");
my $ram_int = int($ram);  # an integer form of RAM, rounded down (some progs only accept integers)
my $half_ram = int($ram / 2);
my $lesscpus = min(1, max(4, int($cpus/4)));  # for samtools sort in pipe
$VALID_ASM{ $asm } or err( "Invalid --asm must be one of: ",join(' ', keys %VALID_ASM) );
$namefmt or err("Please provide a --namefmt for contig IDs");
$namefmt =~ m/%\d+d/ or err("--namefmt must have a %d placeholder for the contig counter");

# Check deps
check_deps();

# Hardware stats
my $CORES = num_cpus();
my $MEMORY = avail_ram_gb();
msg("Machine has $CORES CPU cores and $MEMORY GB RAM");
$ram <= $MEMORY or err("Set --ram to $ram but machine only has $MEMORY GB");

# Make output folder
make_folder($outdir);
$outdir = File::Spec->rel2abs($outdir);
$R1 = File::Spec->rel2abs($R1);
$R2 = File::Spec->rel2abs($R2);

msg("Changing into folder: $outdir");
my $cwd = getcwd();
chdir($outdir);

# Get some read stats
msg("Collecting raw read statistics with 'seqtk'");
my $stat = read_stats($R1);
map { msg("Read stats: $_ = ".$stat->{$_}) } (keys %$stat);

# Estimate genome size (or use genome size provided)
unless ($gsize) {
  msg("Estimating genome size with 'jellyfish'");
  # FIXME: want to choose a dynamic kmer cutoff for high cov samples
  my $minkc = 3;  # max(3, int($depth/100));
  my $dir = File::Temp->newdir();
  my $dirname = $dir->dirname;
  run_cmd("zcat \Q$R1\E | jellyfish count -s$ram_int -m25 --canonical -L$minkc -t$cpus -o $dirname/mer_counts.jf /dev/fd/0");
  run_cmd("jellyfish stats $dirname/mer_counts.jf", '20-jf.log');
  my($ucount) = grep { m/Distinct:/ } read_file('20-jf.log');
  $ucount =~ m/(\d+)$/ or err("Could not determine unique counted k-mers using kmc");
  $gsize = $1;
}
msg("Using genome size $gsize bp");

# Estimate sequencing depth
my $orig_depth = int( $stat->{'total_bp'} / $gsize );
msg("Estimated sequencing depth: $orig_depth x");

# Optionally subsample the data to --depth
if ($depth and $depth > 0 and $orig_depth > 1.1 * $depth) {
  my $factor = sprintf "%.3f", $depth / $orig_depth;
  msg("Subsampling reads by factor $factor to get from ${orig_depth}x to ${depth}x");
  run_cmd("seqtk sample \Q$R1\E $factor | pigz --fast -c -p $cpus > R1.sub.fq.gz");
  $R1 = "R1.sub.fq.gz";
  run_cmd("seqtk sample \Q$R2\E $factor | pigz --fast -c -p $cpus > R2.sub.fq.gz");
  $R2 = "R2.sub.fq.gz";
}
else {
  msg("No read depth reduction requested or necessary.");
}

# Get reads: if trimming, trim the originals into this folder, otherwise symlink
if ($trim) {
  msg("Trimming reads");
  run_cmd(
    "_JAVA_OPTIONS=-Xmx${ram}g trimmomatic PE -threads $cpus -phred33".
    " \Q$R1\E \Q$R2\E R1.fq.gz /dev/null R2.fq.gz /dev/null $trimopt",
    "30-trimmomatic.log",
  );
}
else {
  run_cmd("ln -s \Q$R1\E R1.fq.gz");
  run_cmd("ln -s \Q$R2\E R2.fq.gz");
}

# Calculating read length distribution
my $RLEN = $stat->{'avg_len'};
msg("Average read length looks like $RLEN bp");
unless ($minlen) {
  $minlen = int( $RLEN / 2);
  msg("Setting --minlen to $minlen");
}

# Choosing some kmers
my @kmers = ();
if ($kmers) {
  # extract user kmers
  msg("Examing provided --kmers $kmers");
  @kmers = split m/\s*\D+\s*/, $kmers;
  my $arl = $stat->{'avg_len'};
  for my $k (@kmers) {
    $k <= $MAX_K or err("k-mer $k to bigger than maximum allowed $MAX_K");
    $k >= $MIN_K or err("k-mer $k to smaller than minimum recommended $MIN_K");
    $k < $arl or err("k-mer $k is greater than average read length $arl");
  }
}
else {
  $MAX_K = min( $MAX_K, int($KMER_READ_FRAC * $RLEN) );
  $MIN_K = 21 if $stat->{'avg_len'} < 75;   # hard-coded choice here....
  msg("Setting k-mer range to ($MIN_K .. $MAX_K)");
  my $kn = 5; # max(4, $cpus);
  my $ks = max(5, int( ($MAX_K - $MIN_K) / ($kn-1) ) );
  $ks++ if $ks % 2 == 1; # need even step to ensure odd values only
  for (my $k=$MIN_K; $k <= $MAX_K; $k+=$ks) {
    push @kmers, $k;
  }
  msg("Estimated K-mers: @kmers [kn=$kn, ks=$ks, kmin=$MIN_K, kmax=$MAX_K]");
}
$kmers = join(',', @kmers);
msg("Using kmers: $kmers");

# Correct reads
msg("Correcting reads with 'Lighter'");
run_cmd(
  "lighter -od . -r R1.fq.gz -r R2.fq.gz -K 32 $gsize -t $cpus -maxcor 1",
  "40-lighter.log"
);

# Overlap corrected reads
msg("Overlapping reads with 'FLASH'");
# WARNING: An unexpectedly high proportion of combined pairs (13.03%)
# overlapped by more than 80 bp, the --max-overlap (-M) parameter.
#my $max_overlap = $stat->{'max_len'} - int( $MIN_FLASH_OVERLAP / 2 ) ;
my $max_overlap = $stat->{'max_len'};
run_cmd("flash -m $MIN_FLASH_OVERLAP -M $max_overlap -d . -o flash -z -t $cpus R1.cor.fq.gz R2.cor.fq.gz",
  "50-flash.log"
);

# Running Spades
# https://twitter.com/spadesassembler/status/907714056387252225
msg("Assembling reads with SPAdes");
run_cmd(
  "spades.py --pe1-1 flash.notCombined_1.fastq.gz --pe1-2 flash.notCombined_2.fastq.gz --s2 flash.extendedFrags.fastq.gz"
 ." --only-assembler --threads $cpus --memory $ram_int -o . --tmp-dir $tmpdir -k $kmers $opts",
 "/dev/null",  # spades makes its own log file
);

# Correct contigs with Pilon
my $changes = {};

unless ($nocorr) {
  my $logfile = "70-bwa.log";
  my $target = "$asm.fasta";
  -r $target or err("Can not see '$target' file to correct!");
  msg("Checking for assembly errors in $target");
  run_cmd("bwa index $target", $logfile);
  # use original reads here, to help fix any errors from overlapping PE stitching
  run_cmd("(bwa mem -v 3 -x intractg -t $cpus $target R1.fq.gz R2.fq.gz"
         ." | samtools sort --threads $lesscpus -m ${half_ram}G --reference $target -T $tmpdir/samtools.$$ -o $BAM)",
         $logfile);
  run_cmd("samtools index $BAM", $logfile);

  msg("Correcting errors in $target");
  run_cmd(
    "_JAVA_OPTIONS=-Xmx${ram}g pilon --genome $target --frags $BAM --fix bases --output pilon --threads $cpus --changes --mindepth 0.25",
    "80-pilon.log");
  move($target, "$target.uncorrected");
  move("pilon.fasta", $target);
  # Count changes per contig - return a hashref
  $changes = count_changes("pilon.changes");
}
else {
  msg("User supplied --nocorr, so not correcting contigs.");
}

# Write final answer with nicer names
my $ncontigs = 0;
my $nbases = 0;
my $seq = read_fasta("$asm.fasta");
my %len = map { ( $_ => length($seq->{$_}) ) } (keys %{$seq});
for my $id (sort { $len{$b} <=> $len{$a} } keys %{$seq}) {
  # NODE_1_length_114969_cov_29.8803_pilon
  $id =~ m/cov_(\d+(\.\d+)?)/ or err("Could not get coverage of contig: $id");
  my $cov = $1;
  if ($len{$id} < $minlen) {
    msg("Removing short contig (< $minlen bp): $id");
    delete $seq->{$id};
  }
  elsif ($cov < $mincov) {
    msg("Removing low coverage contig (< $mincov x): $id");
    delete $seq->{$id};
  }
  else {
    $ncontigs++;
    my $len = $len{$id};
    $nbases += $len;
    $cov = sprintf "%.1f", $cov;
    my $corr = $changes->{$id} || 0;
    # $id =~ s/_pilon$// unless $nocorr;
    my $newid = sprintf "$namefmt len=$len cov=$cov corr=$corr spades=$id", $ncontigs;
    $seq->{$newid} = $seq->{$id};
    delete $seq->{$id};
  }
}
write_fasta("contigs.fa", $seq);

# Spades changed output names when 3.11 came out
for my $gfa ('assembly_graph_with_scaffolds.gfa', 'assembly_graph.gfa') {
  if (-r $gfa) {
    msg("Using '$gfa' as 'contigs.gfa'");
    move($gfa, "contigs.gfa");
    last;
  }
}

msg("Writing $EXE log file.");
move("spades.log", "60-spades.log");

# Cleanup time!
unless ($keepfiles) {
  # corrected, overlapped and symlinked original reads
  unlink glob("*q.gz");
  # keep the .gfa and delete the .fastg
  unlink glob("*.fastg");
  # BWA indices
  unlink glob("$asm.fasta.*");
  unlink $BAM, "$BAM.bai";
  # Spades Kmer folders
  remove_tree( map { "K$_" } split m/,/, $kmers );
  # KMC
  unlink glob("kmc.*");
  # other gumpf
  remove_tree( 'misc' );
  unlink glob("*.paths");
  unlink "params.txt", "dataset.info", "flash.histogram", "input_dataset.yaml";
}

# Say our goodbyes
my $wallsecs = time - $t0;
my($mins,$secs) = ( int($wallsecs/60), $wallsecs % 60 );
msg("Walltime used: $mins min $secs sec");

#msg("If you use this result please cite the Shovill:");
#msg("Seemann T (2017) Shovill: rapid prokaryotic genome assembly. GitHub $URL");
#msg("Type '$EXE --citation' for more details.");

msg("Results in: $outdir");
msg("Final assembly graph: $outdir/contigs.gfa");
msg("Final assembly contigs: $outdir/contigs.fa");
msg("It contains $ncontigs (min=$minlen) contigs totalling $nbases bp.");

# Inspiration
my @motd = (
  "More correct contigs is better than fewer wrong contigs.",
  "A shovel will move more dirt than a spade.",
  "Wishing you a life free of misassemblies.",
  "Remember, genomic repeats > ~800bp will be collapsed into single contigs.",
  "Remember, an assembly is just a _hypothesis_ of the original sequence!",
  "Use Bandage to inspect the .gfa assembly graph: https://rrwick.github.io/Bandage/",
  "Found a bug in $EXE? Post it at $URL/issues",
  "Have a suggestion for $EXE? Tell me at $URL/issues",
  "The $EXE manual is at $URL/blob/master/README.md",
  "Did you know? $EXE is a play on the words 'Spades' and 'Illumina' ('shovel')",
  "The name '$EXE' is pronounced as 'shovel' in English",
);
srand( $$ + $t0 + $MAX_K ); # seed
msg( $motd[ int(rand(scalar(@motd))) ] );
msg("Done.");

# Dump log and return to original folder
write_file("00-$EXE.log", @LOG);
chdir($cwd);
exit(0);

#----------------------------------------------------------------------
sub check_deps {
  my($exit) = @_;
  # Check we have the required binaries
  my @exe = qw(seqtk pigz kmc trimmomatic lighter flash spades.py bwa samtools java pilon tee);
  push @exe, ($^O eq 'linux' ? 'vmstat' : 'sysctl');
  for my $exe (@exe) {
    my $fullexe = find_exe($exe);
    $fullexe ? msg("Using $exe - $fullexe") : err("Could not find '$exe' - please install it.");
  }
  exit(0) if $exit;
}

#----------------------------------------------------------------------
sub count_changes {
  my($fname) = @_;
  my @diffs = read_file($fname);
  my $diff = {};
  my $total=0;
  foreach (@diffs) {
    # NODE_2_length_262460_cov_10.3709:152516 NODE_2_length_262460_cov_10.3709_pilon:152516 A T
    # we want the 2nd contig name
    next unless m/ (\S+?):\d+(-\d+)? /;
    $diff->{$1}++;
    $total++;
  }
  msg("Repaired", scalar(keys %$diff), "contigs in $asm at $total positions.");
  return $diff;
}

#----------------------------------------------------------------------
sub read_stats {
  my($R1) = @_;
  my $outfile = "10-seqtk.tab";
  my $stat;
  # we use MINBQ to get an idea of what it would be after quality clipping
  run_cmd("seqtk fqchk -q$MINBQ \Q$R1\E > $outfile");
  my @row = read_file($outfile);
#  msg($row[0]);
  for my $tag ('min_len', 'max_len', 'avg_len') {
    $row[0] =~ m/$tag:\s*(\d+(\.\d+)?);/ or err("Can't parse $tag from: $row[0]");
    $stat->{$tag} = int( $1 + 0.5 );
  }
  $row[2] =~ m/^ALL\s+(\d+)/ or err("Can't parse ALL #bases from: $row[2]");
  $stat->{'total_bp'} = $1 * 2;  # multiply by 2 as only using R1 (hack)
  return $stat;
}

#----------------------------------------------------------------------
sub make_folder {
  my($outdir) = @_;
  if (-d $outdir) {
    if ($force) {
      msg("Forced removal of existing --outdir $outdir (please wait)");
      remove_tree($outdir);
    }
    else {
      err("Folder '$outdir' already exists. Try using --force");
    }
  }
  make_path($outdir);
}

#----------------------------------------------------------------------
sub guess_bp {
  my($s) = @_;
  my %mult = ('G'=>1E9,'M'=>1E6,'K'=>1E3);
  $s =~ m/^([\d\.]+)([GMK])?$/i or die "Couldn't parse '$s'";
  my $bp = $1;
  $bp = $bp * $mult{uc($2)} if defined $2;
  return $bp;
}

#----------------------------------------------------------------------
sub run_cmd {
  my($cmd, $logfile) = @_;
  if ($logfile) {
    $cmd .= $debug ? " 2>&1 | tee -a $logfile" : " >> $logfile 2>&1";
  }
  msg("Running: $cmd");
  system($cmd)==0 or err("Error $? running command");
}

#----------------------------------------------------------------------
sub find_exe {
  my($bin) = shift;
  for my $dir (File::Spec->path) {
    my $exe = File::Spec->catfile($dir, $bin);
    return $exe if -x $exe;
  }
  return;
}

#----------------------------------------------------------------------
sub msg {
  my $msg = "@_\n";
  print STDERR $msg;
  push @LOG, $msg;
}

#----------------------------------------------------------------------
sub err {
  msg(@_);
  exit(1);
}

#----------------------------------------------------------------------
sub num_cpus {
  my($num)= qx(getconf _NPROCESSORS_ONLN); # POSIX
  chomp $num;
  return $num || 1;
}

#----------------------------------------------------------------------
sub avail_ram_gb {
  my $ram=0;
  if ($^O eq 'linux') {
    my($line) = grep { m/total memory$/ } qx(vmstat -s);
    $line =~ m/(\d+)/;
    $ram = $1 / 1024 / 1024; # convert KB to GB
  }
  elsif ($^O eq 'darwin') {    # macOS
    my($line) = qx(sysctl hw.memsize);
    $line =~ m/(\d+)/;
    $ram = $1 / 1024 / 1024 / 1024; # convert Bytes to GB
  }
  $ram && $ram >= $MIN_RAM_GB or err("Could not determine available RAM");
  return $ram;
}

#----------------------------------------------------------------------
sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
sub read_fasta {
  my($fname) = @_;
  my $seq;
  my $id;
  # Bioperl is too heavyweight - that's my excuse for this
  open my $FASTA, '<', $fname or err("Could not open $fname");
  while (my $line = <$FASTA>) {
    chomp $line;
    if ($line =~ m/^>(\S+)/) {
      $id = $1;
      $seq->{$id} = '';
    }
    else {
      $seq->{$id} .= $line;
    }
  }
  close $FASTA;
  return $seq;
}

#----------------------------------------------------------------------
sub write_fasta {
  my($fname, $seq) = @_;
  open my $FASTA, '>', $fname or err("Could not write to $fname");
  for my $id (sort { $a cmp $b } keys %{$seq}) {
    print $FASTA ">$id\n";
    # break contig in 60 characters per line
    my @line = ($seq->{$id} =~ m/(.{1,60})/gs);
    print $FASTA (map { $_."\n" } @line);
  }
  close $FASTA;
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",       VAR=>\&usage,                    DESC=>"This help"},
    {OPT=>"version!",   VAR=>\&version,                  DESC=>"Print version and exit"},
    {OPT=>"check!",     VAR=>\&check_deps,               DESC=>"Check dependencies are installed"},
    {OPT=>"debug!",     VAR=>\$debug,     DEFAULT=>0,    DESC=>"Debug info"},
    {OPT=>"cpus=i",     VAR=>\$cpus,      DEFAULT=>min(16, num_cpus()), DESC=>"Number of CPUs to use"},
    {OPT=>"outdir=s",   VAR=>\$outdir,    DEFAULT=>'',   DESC=>"Output folder"},
    {OPT=>"namefmt=s",  VAR=>\$namefmt,   DEFAULT=>'contig%05d', DESC=>"Format of contig FASTA IDs in 'printf' style"},
    {OPT=>"force!",     VAR=>\$force,     DEFAULT=>0,    DESC=>"Force overwite of existing output folder"},
    {OPT=>"R1=s",       VAR=>\$R1,        DEFAULT=>'',   DESC=>"Read 1 FASTQ"},
    {OPT=>"R2=s",       VAR=>\$R2,        DEFAULT=>'',   DESC=>"Read 2 FASTQ"},
    {OPT=>"depth=i",    VAR=>\$depth,     DEFAULT=>100,  DESC=>"Sub-sample --R1/--R2 to this depth. Disable with --depth 0"},
    {OPT=>"gsize=s",    VAR=>\$gsize,     DEFAULT=>'',   DESC=>"Estimated genome size <blank=AUTODETECT>"},
    {OPT=>"kmers=s",    VAR=>\$kmers,     DEFAULT=>'',   DESC=>"K-mers to use <blank=AUTO>"},
    {OPT=>"opts=s",     VAR=>\$opts,      DEFAULT=>'',   DESC=>"Extra SPAdes options eg. --plasmid --sc ..."},
    {OPT=>"nocorr!",    VAR=>\$nocorr,    DEFAULT=>0,    DESC=>"Disable post-assembly correction"},
    {OPT=>"trim!",      VAR=>\$trim,      DEFAULT=>0,    DESC=>"Use Trimmomatic to remove common adaptors first"},
    {OPT=>"trimopt=s",  VAR=>\$trimopt,   DEFAULT=>"ILLUMINACLIP:$ADAPTERS:1:30:11 LEADING:$MINBQ TRAILING:$MINBQ MINLEN:30 TOPHRED33", DESC=>"Trimmomatic options"},
    {OPT=>"minlen=i",   VAR=>\$minlen,    DEFAULT=>1,    DESC=>"Minimum contig length <0=AUTO>"},
    {OPT=>"mincov=f",   VAR=>\$mincov,    DEFAULT=>2,    DESC=>"Minimum contig coverage <0=AUTO>"},
    {OPT=>"asm=s",      VAR=>\$asm,       DEFAULT=>'contigs', DESC=>"Spades result to correct: before_rr contigs scaffolds"},
    {OPT=>"tmpdir=s",   VAR=>\$tmpdir,    DEFAULT=>$ENV{TMPDIR} || '/tmp', DESC=>"Fast temporary directory"},
    {OPT=>"ram=f",      VAR=>\$ram,       DEFAULT=>8,    DESC=>"Try to keep RAM usage below this many GB"},
    {OPT=>"keepfiles!", VAR=>\$keepfiles, DEFAULT=>0,    DESC=>"Keep intermediate files"},
  );

  ! @ARGV && usage(1);

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage(1);

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

#----------------------------------------------------------------------
sub usage {
  my($exitcode) = @_;
  $exitcode = 0 if $exitcode eq 'help'; # what gets passed by getopt func ref
  $exitcode ||= 0;

  select STDERR if $exitcode; # write to STDERR if exitcode is error

  print "Synopsis:\n  Faster de novo assembly pipeline based around Spades\n";
  print "Usage:\n  $EXE [options] --outdir DIR --R1 R1.fq.gz --R2 R2.fq.gz\n";
  print "Author:\n  $AUTHOR\n";
  print "Options:\n";
  foreach (@Options) {
    my $def = $_->{DEFAULT};
    if (defined $def) {
      $def = 'OFF' if $_->{OPT} =~ m/!$/;
      $def = "'$def'" if $_->{OPT} =~ m/=s$/;
      $def = " (default: $def)";
    }
    $_->{OPT} =~ s/!$//;
    $_->{OPT} =~ s/=s$/ XXX/;
    $_->{OPT} =~ s/=i$/ N/;
    $_->{OPT} =~ s/=f$/ n.nn/;
    printf "  --%-13s %s%s\n", $_->{OPT}, $_->{DESC}, $def;
  }
  print "Documentation:\n  $URL\n";

  exit($exitcode);
}

#----------------------------------------------------------------------
